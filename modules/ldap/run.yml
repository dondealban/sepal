- file: path="/data/ldap" state=directory
- file: path="/data/ldap/certificates" state=directory
- file: path="/data/ldap/database" state=directory
- file: path="/data/ldap/config" state=directory

- copy: src="{{ config_home }}/certificates/ldap-crt.pem" dest=/data/ldap/certificates/ldap-crt.pem
- copy: src="{{ config_home }}/certificates/ldap-key.pem" dest=/data/ldap/certificates/ldap-key.pem
- copy: src="{{ config_home }}/certificates/ldap-ca.crt.pem" dest=/data/ldap/certificates/ldap-ca.crt.pem

- file: path="/data/ldap/database/alock" state=absent
- file: path="/data/ldap/module_initialized" state=absent

- name: "ldap | Start container"
  docker_container:
    api_version: "{{ api_version }}"
    name: "{{ name }}"
    pull: "{{ pull }}"
    image: "{{ image }}"
    state: "{{ state }}"
    restart_policy: "{{ restart_policy }}"
    network_mode: "{{ network_mode }}"
    log_driver: syslog
    log_opt:
      syslog-address: "{{ syslog_address }}"
      tag: "ldap"
    networks:
      - name: 'sepal'
    ports:
    - "389:389"
    - "636:636"
    volumes:
    - "/data/ldap:/data"
    # Parent image volumes
    - "/data/ldap/database:/var/lib/ldap"
    - "/data/ldap/config:/etc/ldap/slapd.d"
    env:
      LDAP_ORGANISATION: 'SEPAL'
      LDAP_DOMAIN: 'sepal.org'
      LDAP_ADMIN_PASSWORD: "{{ ldap_admin_password }}"
      LDAP_TLS_CRT_FILENAME: ldap-crt.pem
      LDAP_TLS_KEY_FILENAME: ldap-key.pem
      LDAP_TLS_CA_CRT_FILENAME: ldap-ca.crt.pem
      LDAP_TLS_CIPHER_SUITE: SECURE256:-VERS-SSL3.0
      LDAP_TLS_VERIFY_CLIENT: never
  register: container

# Check is container is started/restarted by checking if container start time changed after executing the
# docker_container task.  Cannot use the container.changed, since it always return true when image is pulled
# https://github.com/ansible/ansible/issues/19549
- name: "Checking start time of {{ container_name | default(module) }}"
  script: "start_time.sh {{ container_name | default(module) }}"
  register: new_start_time

- set_fact:
   new_start_time: "{{ new_start_time.stdout | regex_replace('[\\r\\n]+', '') }}"

- name: "ldap | Wait until initialized"
  wait_for: path=/data/ldap/module_initialized
  when: new_start_time != start_timestamp

